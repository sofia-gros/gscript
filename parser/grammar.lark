start: statement+

?statement: import_stmt
          | var_decl
          | func_def
          | func_call_stmt

import_stmt: "import" import_plain "from" import_string
           | "import" import_plain

import_plain: CNAME
import_string: ESCAPED_STRING

var_decl: (LET | CONST) CNAME type? "=" expr
LET: "let"
CONST: "const"

func_def: "func" CNAME "(" params? ")" return_type block

params: param ("," param)*
param: CNAME type

return_type: type               -> return_type
           |                    -> empty_return

type: CNAME

block: "{" statement* "}"

?expr: func_call
     | add
     | atom

func_call_stmt: func_call ";"
func_call: CNAME "(" args? ")"
args: expr ("," expr)*

?add: expr "+" expr             -> add

?atom: CNAME                    -> var
     | ESCAPED_STRING           -> string
     | SIGNED_NUMBER            -> number

%import common.CNAME
%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS